const express = require('express');
const PDFDocument = require('pdfkit');
const fs = require('fs');
const app = express();
const port = 3000;

// Store latest data
let latestData = null;

app.use(express.json());
app.use(express.static('public'));

// Ensure reports directory exists
if (!fs.existsSync('./reports')) {
    fs.mkdirSync('./reports');
}

app.get('/api/energy-data', (req, res) => {
    res.json(latestData || { message: 'No data yet' });
});

app.post('/api/energy-data', (req, res) => {
    latestData = req.body;
    console.log('Received:', latestData);
    res.send({ status: 'ok' });
});

// Carbon report endpoint
app.get('/api/carbon-report', (req, res) => {
    if (!latestData) {
        return res.status(400).send('No data available for report generation');
    }

    const doc = new PDFDocument({
        margin: 50,
        size: 'A4'
    });
    
    const filename = `Energy-Carbon-Report-${Date.now()}.pdf`;
    const filepath = `./reports/${filename}`;
    const writeStream = fs.createWriteStream(filepath);
    doc.pipe(writeStream);
    
    // Constants
    const CO2_RATE = 0.400; // Thailand's rate in kg/kWh
    const carbonFootprint = latestData.e * CO2_RATE;

    // Title
    doc.font('Helvetica-Bold')
       .fontSize(24)
       .text('Energy & Carbon Report', {
           align: 'center',
           underline: true
       });
    
    // Date and Time
    doc.moveDown()
       .font('Helvetica')
       .fontSize(12)
       .text(`Report Generated: ${new Date().toLocaleString('th-TH', {
           dateStyle: 'long',
           timeStyle: 'medium'
       })}`);
    
    // Current Readings Section
    doc.moveDown()
       .font('Helvetica-Bold')
       .fontSize(14)
       .text('Current Readings:');
    
    doc.font('Helvetica')
       .fontSize(12)
       .text(`Voltage: ${latestData.v.toFixed(1)} V`)
       .text(`Current: ${latestData.c.toFixed(3)} A`)
       .text(`Power: ${latestData.p.toFixed(1)} W`)
       .text(`Energy: ${latestData.e.toFixed(3)} kWh`)
       .text(`Frequency: ${latestData.f.toFixed(1)} Hz`)
       .text(`Power Factor: ${latestData.pf.toFixed(2)}`);
    
    // Carbon Footprint Section
    doc.moveDown()
       .font('Helvetica-Bold')
       .fontSize(14)
       .text('Carbon Footprint Analysis:');
    
    doc.font('Helvetica')
       .fontSize(12)
       .text(`Carbon Footprint: ${carbonFootprint.toFixed(3)} kg CO2`)
       .text(`Based on Thailand's emission rate of ${CO2_RATE} kg/kWh`);

    // Environmental Impact
    doc.moveDown()
       .font('Helvetica-Bold')
       .fontSize(14)
       .text('Environmental Impact:');
    
    doc.font('Helvetica')
       .fontSize(12)
       .text('To offset this carbon footprint:')
       .moveDown(0.5)
       .list([
           `${(carbonFootprint / 0.06).toFixed(1)} minutes of tree growth needed`,
           `${(carbonFootprint * 2.4).toFixed(1)} km of car travel equivalent`,
           `${(carbonFootprint * 4.4).toFixed(1)} smartphone charges`
       ]);

    // Recommendations
    doc.moveDown()
       .font('Helvetica-Bold')
       .fontSize(14)
       .text('Energy Saving Recommendations:');
    
    doc.font('Helvetica')
       .fontSize(12)
       .list([
           'Use LED bulbs to reduce power consumption',
           'Unplug devices when not in use',
           'Improve power factor for better efficiency',
           'Consider using timers for non-essential equipment'
       ]);

    // Footer
    doc.moveDown()
       .fontSize(10)
       .text('Generated by Energy Monitor Dashboard', {
           align: 'center',
           color: 'grey'
       });
    
    // Finalize PDF
    doc.end();
    
    writeStream.on('finish', () => {
        res.download(filepath, filename, (err) => {
            if (err) {
                console.error('Error sending file:', err);
                res.status(500).send('Error generating report');
            }
            // Clean up file after sending
            fs.unlink(filepath, (err) => {
                if (err) console.error('Error deleting file:', err);
            });
        });
    });
});

app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});